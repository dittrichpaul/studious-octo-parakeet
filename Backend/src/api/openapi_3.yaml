---
openapi: 3.0.2
info:
  title: Ausgabenmanager
  version: 1.0.0
  description: "Die Ausgaben-App nutzt einen simplen REST-Webservices zur Kommunikation\
    \ mit dem Backend. Dieser ermöglicht die üblichen CRUD-Operationen zur Suche,\
    \ Anzeige, Bearbeitung und Löschung von Ausgaben, wobei jede Ausgabe aus einem\
    \ Name, Details, Betrag und eine Priorität besteht"
  contact:
    name: "Paul Dittrich, Yannick Elm"
    email: pauldittrich02gmail.com
  license:
    name: The Unlicense
    url: http://unlicense.org
paths:
  /expense:
    summary: Path used to manage the list of ausgabes.
    description: "The REST endpoint/path used to list and create zero or more `Ausgabe`\
      \ entities.  This path contains a `GET` and `POST` operation to perform the\
      \ list and create tasks, respectively."
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Expense'
          description: Successful response - returns an array of `Ausgabe` entities.
      operationId: getAusgabes
      summary: List All Ausgabes
      description: Gets a list of all `Ausgabe` entities.
    put:
      responses:
        "200":
          description: OK
      summary: Update Ausgabe
      description: Update Ausgabe
    post:
      requestBody:
        description: A new `Ausgabe` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Expense'
        required: true
      responses:
        "201":
          description: Successful response.
      operationId: createAusgabe
      summary: Create a Ausgabe
      description: Creates a new instance of a `Ausgabe`.
    parameters:
    - name: name
      description: Ausgabename
      schema:
        type: string
      in: query
    - name: details
      description: Details
      schema:
        type: string
      in: query
    - name: amount
      description: Betrag
      schema:
        type: string
      in: query
    - name: prio
      description: Priorität
      schema:
        type: string
      in: query
  /expense/{expenseId}:
    summary: Path used to manage a single Ausgabe.
    description: "The REST endpoint/path used to get, update, and delete single instances\
      \ of an `Ausgabe`.  This path contains `GET`, `PUT`, and `DELETE` operations\
      \ used to perform the get, update, and delete tasks, respectively."
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expense'
          description: Successful response - returns a single `Ausgabe`.
      operationId: getAusgabe
      summary: Get a Ausgabe
      description: Gets the details of a single instance of a `Ausgabe`.
    put:
      requestBody:
        description: Updated `Ausgabe` information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Expense'
        required: true
      parameters:
      - name: expenseId
        description: A unique identifier for a `Ausgabe`.
        schema:
          type: string
        in: path
        required: true
      responses:
        "202":
          description: Successful response.
      operationId: updateAusgabe
      summary: Update a Ausgabe
      description: Updates an existing `Ausgabe`.
    post:
      responses:
        "200":
          description: OK
    delete:
      responses:
        "204":
          description: Successful response.
      operationId: deleteAusgabe
      summary: Delete a Ausgabe
      description: Deletes an existing `Ausgabe`.
    patch:
      requestBody:
        description: Zu ändernde Felder
        content:
          application/json: {}
      responses:
        "200":
          content:
            application/json: {}
          description: OK
    parameters:
    - name: expenseId
      description: A unique identifier for a `Ausgabe`.
      schema:
        type: string
      in: path
      required: true
  /income:
    summary: Path used to manage the list of incomes.
    description: "The REST endpoint/path used to list and create zero or more `Income`\
      \ entities.  This path contains a `GET` and `POST` operation to perform the\
      \ list and create tasks, respectively."
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Income'
          description: Successful response - returns an array of `Income` entities.
      operationId: getIncomes
      summary: List All Incomes
      description: Gets a list of all `Income` entities.
    put:
      requestBody: {}
      responses:
        "200":
          description: OK
      summary: Update Income
      description: Update Income
    post:
      requestBody:
        description: A new `Income` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Income'
        required: true
      responses:
        "201":
          description: Successful response.
      operationId: createIncome
      summary: Create a Income
      description: Creates a new instance of a `Income`.
    parameters:
    - name: amount
      description: Betrag
      schema:
        type: string
      in: query
    - name: details
      description: Details
      schema:
        type: string
      in: query
    - name: name
      description: Einnahmename
      schema:
        type: string
      in: query
    - name: prio
      description: Priorität
      schema:
        type: string
      in: query
  /income/{incomeId}:
    summary: Path used to manage a single Income.
    description: "The REST endpoint/path used to get, update, and delete single instances\
      \ of an `Income`.  This path contains `GET`, `PUT`, and `DELETE` operations\
      \ used to perform the get, update, and delete tasks, respectively."
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Income'
          description: Successful response - returns a single `Income`.
      operationId: getIncome
      summary: Get a Income
      description: Gets the details of a single instance of a `Income`.
    put:
      requestBody:
        description: Updated `Income` information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Income'
        required: true
      responses:
        "202":
          description: Successful response.
      operationId: updateIncome
      summary: Update a Income
      description: Updates an existing `Income`.
    delete:
      responses:
        "204":
          description: Successful response.
      operationId: deleteIncome
      summary: Delete a Income
      description: Deletes an existing `Income`.
    patch:
      requestBody:
        content:
          application/json: {}
      responses:
        "200":
          description: |
            OK
    parameters:
    - name: incomeId
      description: A unique identifier for a `Income`.
      schema:
        type: string
      in: path
      required: true
components:
  schemas:
    HATEOAS_Link:
      title: Root Type for HATEOAS_Link
      description: HATEOAS-Link
      type: object
      properties:
        url:
          type: string
        method:
          type: string
        query_params:
          type: array
          items:
            type: string
      example:
        url: /expense
        method: GET
        query_params:
        - id
        - name
        - amount
    HATEOAS_Resource:
      title: Root Type for HATEOAS_Resource
      description: HATEOAS-Links einer Resource
      type: object
      properties:
        read:
          $ref: '#/components/schemas/HATEOAS_Link'
        update:
          $ref: '#/components/schemas/HATEOAS_Link'
        patch:
          $ref: '#/components/schemas/HATEOAS_Link'
        delete:
          $ref: '#/components/schemas/HATEOAS_Link'
      example:
        read: ""
        update: ""
        patch: ""
        delete: ""
    HATEOAS_Collection:
      title: Root Type for HATEOAS_Collection
      description: HATEOAS_Links einer Collection
      type: object
      properties:
        _name:
          type: string
        query:
          $ref: '#/components/schemas/HATEOAS_Link'
        create:
          $ref: '#/components/schemas/HATEOAS_Link'
      example:
        _name: Ausgaben
        query: ""
        create: ""
    Expense:
      title: Root Type for Ausgabe
      description: Eintrag in Ausgabenmanager
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        details:
          type: string
        amount:
          type: string
        prio:
          type: string
        _links:
          $ref: '#/components/schemas/HATEOAS_Resource'
          description: ""
      example:
        _id: 621ff9a936997df5baba746e
        name: Brot
        details: Roggen
        amount: "3,5"
        prio: hoch
    Income:
      description: Eintrag in Ausgaben-Manager
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/HATEOAS_Resource'
          description: ""
tags:
- name: Ausgabe
  description: Ausgabeeintrag
- name: Einnahme
  description: Einnahmeeintrag
